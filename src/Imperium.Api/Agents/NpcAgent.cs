using Imperium.Domain.Agents;
using Imperium.Infrastructure;
using Imperium.Domain.Models;
using Imperium.Llm;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace Imperium.Api.Agents;

/// <summary>
/// –ê–≥–µ–Ω—Ç NpcAI: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–ø–ª–∏–∫–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö NPC.
/// –û—Ç–≤–µ—Ç—ã —Å—Ç—Ä–æ–≥–æ –≤ JSON: { "reply": string, "moodDelta"?: int }.
/// –†–µ–ø–ª–∏–∫–∏ ‚Äî –±—ã—Ç–æ–≤—ã–µ, —ç–ø–æ—Ö–∞–ª—å–Ω—ã–µ, –±–µ–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.
/// </summary>
public class NpcAgent : IWorldAgent
{
    public string Name => "NpcAI";
    private readonly ILogger<NpcAgent>? _logger;

    public NpcAgent(ILogger<NpcAgent>? logger = null)
    {
        _logger = logger;
    }

    public async Task TickAsync(IServiceProvider scope, CancellationToken ct)
    {
        var db = scope.GetRequiredService<ImperiumDbContext>();
        var llm = scope.GetRequiredService<ILlmClient>();
        var stream = scope.GetRequiredService<Imperium.Api.EventStreamService>();

        // üßÆ –≤—ã–±—Ä–∞—Ç—å –¥–æ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö NPC –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
        var chars = await db.Characters
            .OrderBy(c => EF.Functions.Random())
            .Take(5)
            .ToListAsync(ct);

        if (chars.Count == 0) return;

        var events = new List<GameEvent>();

        var forbidden = new[]
        {
            "2025","2024","2023","–∏–Ω—Ç–µ—Ä–Ω–µ—Ç","—Å–µ—Ä–≤–µ—Ä","–∫–æ–º–ø—å—é—Ç–µ—Ä","—Å–º–∞—Ä—Ç—Ñ–æ–Ω","—Ç–µ–ª–µ—Ñ–æ–Ω","—ç–ª–µ–∫—Ç—Ä–æ–Ω","email",
            "–ø–æ—á—Ç–∞","—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫","–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç","API","–∫–æ–¥","GitHub","github","stackoverflow","stack overflow"
        };

        foreach (var ch in chars)
        {
            if (ct.IsCancellationRequested) break;

            string archetype = InferArchetype(ch.SkillsJson);
            string prompt = BuildPrompt(ch, archetype);

            try
            {
                string? raw = null;
                const int maxAttempts = 5;
                int reasksPerformed = 0;
                int sanitizations = 0;

                for (int attempt = 1; attempt <= maxAttempts; attempt++)
                {
                    // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —É—Ç–æ—á–Ω–µ–Ω–∏—è
                    if (attempt == 1)
                        raw = await llm.SendPromptAsync(prompt, ct);
                    else
                    {
                        reasksPerformed++;
                        raw = await llm.SendPromptAsync(ReaskPrompt(), ct);
                    }

                    if (string.IsNullOrWhiteSpace(raw))
                        continue;

                    // –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ª–∞—Ç–∏–Ω–∏—Ü–∞ (–∞–Ω–≥–ª. –±—É–∫–≤—ã) ‚Äî —á–∞—â–µ –≤—Å–µ–≥–æ –º–æ–¥–µ–ª—å —É—Ç–µ–∫–ª–∞ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º -> reask
                    if (ContainsLatinLetters(raw) && attempt < maxAttempts)
                    {
                        _logger?.LogInformation("NpcAgent: latin detected in raw reply for {Character} ‚Äî reasking", ch.Name);
                        continue;
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                    if (HasForbiddenTokens(raw, forbidden) && attempt < maxAttempts)
                    {
                        _logger?.LogInformation("NpcAgent: forbidden tokens detected in raw reply for {Character} ‚Äî reasking", ch.Name);
                        continue;
                    }

                    // –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                    if (TryParseNpcReply(raw, out var reply, out var mood))
                    {
                        // –ï—Å–ª–∏ –≤ reply –µ—Å—Ç—å –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏–ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º rewrite
                        if ((ContainsLatinLetters(reply) || HasForbiddenTokens(reply, forbidden)) && attempt < maxAttempts)
                        {
                            _logger?.LogInformation("NpcAgent: reply contains latin/forbidden on attempt {Attempt} for {Character}", attempt, ch.Name);
                            continue;
                        }

                        if ((ContainsLatinLetters(reply) || HasForbiddenTokens(reply, forbidden)) && attempt == maxAttempts)
                        {
                            // —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: –ø—Ä–æ—Å–∏–º LLM –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å reply –∫–∞–∫ –∞—Ä—Ö–∞–∏—á–Ω—ã–π —Ä—É—Å—Å–∫–∏–π
                            try
                            {
                                var rewritePrompt = BuildRewritePrompt(reply);
                                var rewritten = await llm.SendPromptAsync(rewritePrompt, ct);
                                if (!string.IsNullOrWhiteSpace(rewritten) && TryParseNpcReply(rewritten, out var newReply, out var newMood))
                                {
                                    reply = newReply;
                                    mood = newMood ?? mood; // prefer rewritten mood if provided
                                    sanitizations++;
                                }
                            }
                            catch (Exception ex)
                            {
                                _logger?.LogWarning(ex, "NpcAgent: rewrite failed for {Character}", ch.Name);
                            }
                        }

                        if (HasForbiddenTokens(reply, forbidden))
                        {
                            reply = SanitizeReply(reply, forbidden);
                            sanitizations++;
                        }

                        if (reply.Length > 350)
                            reply = reply[..350];

                        var ev = new GameEvent
                        {
                            Id = Guid.NewGuid(),
                            Timestamp = DateTime.UtcNow,
                            Type = "npc_reply",
                            Location = "unknown",
                            PayloadJson = JsonSerializer.Serialize(new
                            {
                                characterId = ch.Id,
                                name = ch.Name,
                                archetype,
                                reply,
                                moodDelta = mood,
                                meta = new { reasksPerformed, sanitizations }
                            })
                        };
                        events.Add(ev);
                        break;
                    }
                }
                if (reasksPerformed > 0)
                    _logger?.LogInformation("NpcAgent: reasks={Reasks} sanitizations={Sanitizations} for {Character}", reasksPerformed, sanitizations, ch.Name);
            }
            catch (Exception ex)
            {
                _logger?.LogWarning(ex, "NpcAgent: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ NPC {Id}", ch.Id);
            }
        }

        // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        if (events.Count > 0)
        {
            db.GameEvents.AddRange(events);
            await db.SaveChangesAsync(ct);

            // üîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è (fire-and-forget)
            _ = Task.Run(async () =>
            {
                foreach (var ev in events)
                {
                    try { await stream.PublishEventAsync(ev); }
                    catch (Exception ex)
                    {
                        _logger?.LogError(ex, "NpcAgent: –æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è {EventId}", ev.Id);
                    }
                }
            }, ct);
        }
    }

    // üß† –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞ NPC
    private static string InferArchetype(string? skillsJson)
    {
        if (string.IsNullOrWhiteSpace(skillsJson)) return "–∫—Ä–µ—Å—Ç—å—è–Ω–∏–Ω";
        var s = skillsJson.ToLowerInvariant();
        return s switch
        {
            var x when x.Contains("—Ä–µ–º–µ—Å") || x.Contains("–∫—É–∑–Ω") => "—Ä–µ–º–µ—Å–ª–µ–Ω–Ω–∏–∫",
            var x when x.Contains("–∫—É–ø–µ—Ü") || x.Contains("—Ç–æ—Ä–≥") => "—Ç–æ—Ä–≥–æ–≤–µ—Ü",
            var x when x.Contains("—Å–æ–ª–¥–∞—Ç") || x.Contains("–≤–æ—è–∫") => "—Å–æ–ª–¥–∞—Ç",
            var x when x.Contains("–∂—Ä–µ—Ü") || x.Contains("–º–æ–Ω–∞—Ö") || x.Contains("—Å–≤—è—â") => "–∂—Ä–µ—Ü",
            _ => "–∫—Ä–µ—Å—Ç—å—è–Ω–∏–Ω"
        };
    }

    // üßæ –ü—Ä–æ–º–ø—Ç
    private static string BuildPrompt(Character ch, string archetype)
    {
        var npcNameJson = JsonSerializer.Serialize(ch.Name);
        var skillsJson = ch.SkillsJson ?? "[]";
        return
            "[role:Npc]\n" +
            $"–í—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–∂ –∞–Ω—Ç–∏—á–Ω–æ–≥–æ –º–∏—Ä–∞ ({archetype}). " +
            "–ì–æ–≤–æ—Ä–∏—Ç–µ –∫–∞–∫ –∂–∏—Ç–µ–ª—å —ç–ø–æ—Ö–∏: –±—ã—Ç–æ–≤–æ–π, –∞—Ä—Ö–∞–∏—á–Ω—ã–π —Å—Ç–∏–ª—å, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–≥–æ–≤, —É—Ä–æ–∂–∞—è, –¥–æ—Ä–æ–≥, –Ω–∞–ª–æ–≥–æ–≤. " +
            "–ù–ò –í –ö–û–ï–ú –°–õ–£–ß–ê–ï –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (–∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –∫–æ–º–ø—å—é—Ç–µ—Ä, —Å–µ—Ä–≤–µ—Ä, API, GitHub –∏ —Ç.–ø.). " +
            "–û—Ç–≤–µ—Ç—å—Ç–µ –¢–û–õ–¨–ö–û –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º JSON: {\"reply\": string, \"moodDelta\": int (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)}. " +
            "reply ‚Äî –º–∞–∫—Å–∏–º—É–º ~35 —Å–ª–æ–≤; moodDelta ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.\n" +
            $"–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ø–µ—Ä—Å–æ–Ω–∞–∂ {npcNameJson}, –≤–æ–∑—Ä–∞—Å—Ç: {ch.Age}, —Å—Ç–∞—Ç—É—Å: {ch.Status ?? "unknown"}, –Ω–∞–≤—ã–∫–∏: {skillsJson}, –≤—Ä–µ–º—è: {DateTime.UtcNow:O}.";
    }

    // üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    private static string ReaskPrompt() =>
        "[role:Npc]\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ë–µ–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, –¥–∞—Ç –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.";

    // üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    private static bool HasForbiddenTokens(string text, string[] forbidden)
    {
        var lower = text.ToLowerInvariant();
        return Regex.IsMatch(lower, @"\b(" + string.Join("|", forbidden.Select(Regex.Escape)) + @")\b");
    }

    // üì¶ –ü–∞—Ä—Å–∏–Ω–≥ JSON
    private static bool TryParseNpcReply(string input, out string reply, out int? mood)
    {
        reply = string.Empty;
        mood = null;
        try
        {
            using var doc = JsonDocument.Parse(input);
            var root = doc.RootElement;
            if (root.TryGetProperty("reply", out var r))
                reply = r.GetString() ?? string.Empty;
            if (root.TryGetProperty("moodDelta", out var m) && m.ValueKind == JsonValueKind.Number)
                mood = m.GetInt32();
            return !string.IsNullOrWhiteSpace(reply);
        }
        catch
        {
            return false;
        }
    }

    // üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–ø–ª–∏–∫–∏
    private static string SanitizeReply(string input, string[] forbidden)
    {
        if (string.IsNullOrWhiteSpace(input)) return string.Empty;
        var s = Regex.Replace(input, "\\b(19|20)\\d{2}\\b", "", RegexOptions.Compiled);
        foreach (var f in forbidden.OrderByDescending(x => x.Length))
            s = Regex.Replace(s, Regex.Escape(f), "", RegexOptions.IgnoreCase);
        return Regex.Replace(s, "\\s+", " ", RegexOptions.Compiled).Trim();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    private static bool ContainsLatinLetters(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return false;
        return Regex.IsMatch(input, "[A-Za-z]", RegexOptions.Compiled);
    }

    // –ü–æ—Å—Ç-–ø—Ä–æ–º–ø—Ç: –ø–µ—Ä–µ–ø–∏—à–∏ reply –≤ –∞—Ä—Ö–∞–∏—á–Ω—ã–π —Ä—É—Å—Å–∫–∏–π, –≤–µ—Ä–Ω–∏ JSON
    private static string BuildRewritePrompt(string reply)
    {
        // –ú—ã –ø–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—É—â–∏–π reply –≤ –ø–æ–ª–µ original, –ø—Ä–æ—Å–∏–º –≤–µ—Ä–Ω—É—Ç—å JSON —Å –ø–æ–ª–µ–º reply –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º
        return "[role:Npc]\n–ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ reply –∫–∞–∫ —É—Å—Ç–æ–π—á–∏–≤–æ–µ, –∞—Ä—Ö–∞–∏—á–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ, —É–±–µ—Ä–∏—Ç–µ –ª—é–±—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ –≥–æ–¥—ã.\n–í–•–û–î (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç):\n" + reply + "\n\n–í–ï–†–ù–ò–¢–ï –¢–û–õ–¨–ö–û JSON: {\"reply\": string, \"moodDelta\": int (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)}";
    }
}
